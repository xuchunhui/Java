				序言
1.面向对象方法的三个基本特征：封装，继承，多态；
2.继承是面向对象是实现软件复用的重要手段；子类继承父类后，直接获得父类的属性和方法；
3.封装指的是将对象的实现细节隐藏起来，然后通过一些公用的方法来暴露该对象的功能；
4.多态指的是子类对象可以直接赋给父类变量，但运行时依然表现出子类的行为特征；

抽象也是面向对象的重要部分，抽象就是忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前木匾相关的方面。
抽象不了解全部，只是考虑部分问题。

1.面向对象：对象是面向对象方法中最基本的概念，它的基本特点是：标志唯一性，分类性，多态性，封装性，模块独立性好。
2.类是具有共同属性，共同方法的对象的集合。类是对象的抽象；对象是类的实例。
3.面向对象方法中，类之间共享属性和操作的机制称为继承。

			数据运算
1.数据基本类型分两类：数值类型，布尔类型。数值类型包括：整形，字符型，浮点型；所有数值类型之间可以进行类型转换，包括
自动类型转换，强制类型转换。
2.算数运算符:位运算符，比较运算符，逻辑运算符。

字符串不是基本数据类型，字符串类型是一个类，一个引用的数据类型。
byte：byte型整数在内存占8位。 -128~127
short:short型整数类型在内存中占有16位。-32768~32767
int：int型数据类型在内存中占32位。 -2^31~2^31-1
long:long型数据类型在内存占64位。-2^63~2^63-1

默认情况下整数常量是int型，浮点常量默认为double型。

short/byte c = 65;正确的；int型数值会自动转型为short/byte型。
long value = 9999999999999；错误，数据过大要在后面加上L；long value = 9999999999999L；不会自动转型。
8进制数：012 以0开头；
16进制数：0X2f 以0X开头；


java没有提供字符串的基本类型，而是通过String类来表示字符串。

int型可以自动转换成float型，

String a = 5; 错误，应该为String a = 5 + "";String b = 5 + 4 + “jj”；输出为9jj；

以下表达式都是正确的；
byte b = 40;
char c = 'c'
int i = 23
double d = .314

19/4=4   19%4=3



switch语句控制表达式只能是：byte，short，char，int。不能为字符串。

this总是指向该方法的对象

类的三个成员：构造器，属性，方法；
static修饰的成员不能访问没有static修饰的成员；
static修饰的成员表明它属于这个类共有，而不是属于该类的单个实例，单个实例也有这种方法；
通常，static修饰的属性和方法也称为类属性，类方法；不使用static
修饰的普通方法，属性则属于该类的单个实例，不属于该类；
static修饰的方法中不能用this引用；

封装：
private 成员:该成员只能在该类的内部被访问。
default 成员(默认):成员可以被相同包下其他类访问。
protected 成员:成员可以被同一个包中其他类访问，也可以被不同包中的子类访问。(该方法通常是希望子类重写这个方法)
public 成员:成员可以被所有类访问，不管是否同包。。。。。


初始化：
类的初始化阶段，先执行最顶层父类的静态初始化块，依次向下，最后指向当前类静态初始化块；
对象初始化阶段，先执行顶层父类的初始化块，构造器，依次向下，最后执行当前类初始化块，构造器；

static不能修饰构造器；

final修饰变量，表示该变量一旦获得初始值后就不可改变；final修饰的类不可有子类(如 java.lang.Math)。不能被继承
Java 提供的Object类有个final修饰的方法：getClass(),Java不希望任何类重写这个方法，因此用final
方法，对于该类提供的toString和equals方法，都允许子类重写；没有用final重写。

接口可以有多个直接父接口，但接口智能继承接口，不能继承类。